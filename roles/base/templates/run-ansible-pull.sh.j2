#! {{ '/usr/local/bin/bash' if ansible_distribution == 'FreeBSD' else '/bin/bash' }}

set -e

# set some environment variables that ansible-pull needs
export HOME=/home/{{ service_account }}
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/{{ service_account }}/bin

# set up to gather output
OUTPUT=/tmp/ansible-pull.$$.log

# retry controls
RETRIES=5
RETRY=0

while [[ $RETRY -lt $RETRIES ]]; do
    RETRY=$((RETRY + 1))

    # run ansible-pull from the directory containing the repository (and, thus, the inventory file)
    cd /home/{{ service_account}}/repo
    set +e
    # if coreutils is not yet installed, we should use ansible pull alone
    ANSIBLE_PULL=ansible-pull
    if command -v timeout >/dev/null
    then
        ANSIBLE_PULL="timeout -k 2m 40m $ANSIBLE_PULL"
    elif command -v timelimit >/dev/null
    then
        # 2500s ~= 40min
        ANSIBLE_PULL="timelimit -t 2500 -T 120 $ANSIBLE_PULL"
    fi
    $ANSIBLE_PULL  \
        -C master \
        -d /home/{{ service_account }}/repo/ \
        -m git \
        -U {{ ansible_git_repository }} \
        -i localhost \
        --vault-password-file=/home/{{ service_account }}/.vault-password \
        -l "localhost,$(hostname),127.0.0.1" \
        local.yml >$OUTPUT 2>&1
    RESULT=$?
    set -e

    if [[ $RESULT -eq 0 ]]; then
        break
    else
        echo '==== RETRYING ===='
        sleep 30
    fi
done

if [ $RESULT -ne 0 ]; then
    echo "ansible-pull run on on "$(uname -n)" failed."
    echo
    cat $OUTPUT
fi

rm -f "$OUTPUT"

# clean up temp files
find /home/{{ service_account }}/.ansible/tmp -type d -mtime +1 -delete 2>&1 | grep -v 'Permission denied'
